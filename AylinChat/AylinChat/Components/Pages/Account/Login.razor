@page "/"
@using System.ComponentModel.DataAnnotations
@using AylinChat.Authentication
@using Microsoft.AspNetCore.Identity
@inject UserManager<AppUser> userManager
@inject SignInManager<AppUser> singInManager
@inject NavigationManager navManager
<h3>Login</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger" role="alert">
        @message
    </div>
}

<div class="col-md-4">
    <section>
        <EditForm Model="@loginModel" OnSubmit="LoginAsync" FormName="LoginForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <h2>User a local account to log in.</h2>

            <div class="form-floating mb-3">
                <InputText id="email" class="form-control" aria-required="true" placeholder="Name@exaple.com"
                           autocomplete="current-email" @bind-Value="loginModel.email" />
                <label for="email" class="form-label">Email:</label>
                <ValidationMessage For="@(() => loginModel.email)" class="text-danger" />
            </div>

            <div class="form-group mb-3">
                <InputText placeholder="password" class="form-control" type="password" id="password"
                           autocomplete="current-password" aria-required="true" @bind-Value="loginModel.password" />
                <label for="password" class="form-label">Password:</label>
                <ValidationMessage For="@(() => loginModel.password)" class="text-danger" />
            </div>

            <button type="submit" class="w-100 btn btn-lg btn-primary">Login</button>
        </EditForm>
        
    </section>
</div>

@code {
    string message = "";
    [SupplyParameterFromForm]
    private LoginModel loginModel { get; set; } = new();
    async Task LoginAsync()
    {

        var findUser = await userManager.FindByEmailAsync(loginModel.email);
        if (findUser == null)
        {
            message = "Sorry, User are not registered with this email address.";
            return;
        }
        var result = await singInManager.CheckPasswordSignInAsync(findUser, loginModel.password, false);
        if (!result.Succeeded)
        {
            message = "Sorry, invalid email/password ";
            return;
        }
        await singInManager.PasswordSignInAsync(findUser, loginModel.password, false, false);
        navManager.NavigateTo("/home", true);
    }


    public class LoginModel
    {
        [Required]
        public string email { get; set; } = string.Empty;

        [Required]
        public string password { get; set; } = string.Empty;
    }
}

