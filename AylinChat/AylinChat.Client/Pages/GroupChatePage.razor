@page "/group-chat"
@attribute [Authorize]
@using AylinChat.Client.AppState
@using AylinChat.Client.ChatServices
@using ChatModels
@inject NavigationManager navigationManager
@inject MyHubConnectionService hubConnectionService
@inject AvailableUserState state
@using ChatModels.DTOs
@using ChatModels.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@rendermode InteractiveWebAssembly
<PageTitle>Aylin-Chat</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-4">
            <div class="card">
                <div class="card-header bg-success text-white">Online Users</div>
                <div class="card-body">
                    <ul class="list-group">
                        @foreach (var user in AvailableUsers)
                        {
                            <li class="list-group-item list-group-item-action" @onclick="() => ChatUser(user)">
                                @user.Fullname
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    Group Chat
                </div>
                <div class="card-body">
                    <ul class="list-group chat-box">
                        @foreach (var groupChat in GroupChats)
                        {
                            <li class="list-group-item mb-2">
                                <div class="message">
                                    <span class="fw-bold">@groupChat.SenderName:</span>
                                    @groupChat.Message
                                </div>
                                <div class="time">@groupChat.DateTime.ToString("dd/MMM/yyyy")</div>
                            </li>
                        }
                    </ul>
                    <div class="mt-3">
                        <form @onsubmit="SendChatToGroup">
                            <div class="input-group">
                                <input type="text" class="form-control" placeholder="Type a message" @bind="GroupChat.Message" required />
                                <button type="submit" class="btn btn-primary">Send</button>
                            </div>
                        </form>
                    </div>
                </div>
                <div class="card-footer bg-secondary text-white">
                    @if (!hubConnectionService.IsConnected)
                    {
                        <div class="alert alert-danger">
                            Disconnected!
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-success">
                            Connected!
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public List<AvailableUserDTO> AvailableUsers { get; set; } = new List<AvailableUserDTO>();
    private GroupChatDTO GroupChat { get; set; } = new GroupChatDTO();
    private HubConnection? _hubConnection;
    public List<GroupChatDTO> GroupChats { get; set; } = new List<GroupChatDTO>();
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = hubConnectionService.GetHubConnection();

        _hubConnection.On<GroupChatDTO>("ReciveMessage ", (chat) =>
        {
            GroupChats.Add(chat);
            InvokeAsync(() => StateHasChanged());
        });

        _hubConnection.On<List<AvailableUserDTO>>("NotifyAllClient", (users) =>
        {
            AvailableUsers = users;
            InvokeAsync(() => StateHasChanged());
        });
       
        var httpClient = new HttpClient();
        await GetCurrentAuthentication(); 


        GroupChats = await httpClient.GetFromJsonAsync<List<GroupChatDTO>>("https://localhost:7005/api/chat");
       
    }

    public async Task GetCurrentAuthentication()
    {
        var user = (await AuthenticationState).User;
        await _hubConnection!.SendAsync("AddAvailableUser", new AvailableUser()
            {
                UserId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier!)!.Value
            });
    }

    private async Task SendChatToGroup()
    {
        GroupChat.SenderId = (await AuthenticationState).User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier!)!.Value;
        await _hubConnection!.SendAsync("SendMessageToGroup", GroupChat);
        GroupChat = new GroupChatDTO();
    }

    private void ChatUser(AvailableUserDTO availableUserDTO)
    {
        state.SetStates(availableUserDTO.Fullname!, availableUserDTO.UserId!);
        navigationManager.NavigateTo("/individual-chat");
    }
}
