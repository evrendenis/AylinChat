@page "/Chat"
@attribute [Authorize]
@using AylinChat.Client.ChatServices
@using AylinChat.Client.DTOs
@using AylinChat.Client.Models
@using ChatModels
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@rendermode InteractiveWebAssembly
<PageTitle>Aylin-Chat</PageTitle>

<div class="row">
    <div class="col-lg-2">
        <ul class="list-group">
            @if(AvailableUsers != null)
            {
                foreach (var u in AvailableUsers)
                {
                    <li class="list-group-item">@u.Fullname</li>
                }
            }
        </ul>
    </div>
    <div class="col-lg-7">
        <div class="card">
            <AuthorizeView>
                <Authorized>
                    <div class="card-header">
                        Aylin-Chat [@context.User.Claims.Where(f=>f.Type == ClaimTypes.Name).Last().Value ]
                        </div>
                </Authorized>
            </AuthorizeView>
            <div class="card-header">Aylin-Chat [] </div>
            <div class="card-bady">
            <ul class="list-group">
                    @foreach (var chat in Chats)
                    {
                        <li class="list-group-item mb-2">
                            @chat.DateTime.Date.ToString("dd/MMM/yyyy")
                            <br/>
                            <span class="fw-blod">@chat.UserName:</span>
                            <br/>
                            @chat.Message
                        </li>                  
                    }
             </ul>
                <div class="mt-3">
                    <EditForm Model="Chat" OnValidSubmit="SendChat">
                    <div class="vstack gap-1">
                        <InputText @bind-Value="Chat.UserName" class="form-control w-25" placeholder="Username"/>
                            <InputTextArea @bind-Value="Chat.Message" class="form-control" placeholder="Message"/>
                    </div>
                    <button class="float-end btn btn-success mt-3" type="submit">Send Message</button>
                    </EditForm>
                </div>
            </div>
            <div class="card-footer fw-bold">
                @if (!IsConnected)
                {
                    <div class="alert alert-danger"> 
                        Dissconected !
                    </div>
                }
                else 
                {
                    <div class="alert alert-success">
                        conected !
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }
    public List<AvailableUserDTO> AvailableUsers { get; set; } = [];
    private Chat Chat = new();
    private HubConnection? _hubConnection;
    public List<Chat> Chats { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
        .WithUrl(navigationManager.ToAbsoluteUri("/Hubs")).Build();

        _hubConnection.On<Chat>("ReceiveMessage", (Chat) =>
        {
            Chats.Add(Chat);
            InvokeAsync(() => StateHasChanged());
        } );

        _hubConnection.On<List<AvailableUserDTO>>("NotifyAllClient", (users) =>
       {
           AvailableUsers = users;
           InvokeAsync(() => StateHasChanged());
       });

        await _hubConnection.StartAsync(); // need up 
        await GetUserAuthentication();
        var httpClient = new HttpClient();
        Chats = await httpClient.GetFromJsonAsync<List<Chat>>("https://localhost:7005/api/chat");
        AvailableUsers = await httpClient.GetFromJsonAsync<List<AvailableUserDTO>>("https://localhost:7005/api/chat/users");

    }
    private async Task GetUserAuthentication()
    {
        var user = (await AuthenticationState).User;
        if(user.Identity!.IsAuthenticated == true)
        {
            await _hubConnection!.SendAsync("AddAvailableUserAsync", new AvailableUser()
            {
               UserId = user.Claims.FirstOrDefault( _ => _.Type == ClaimTypes.NameIdentifier)!.Value   
            });

        }

    }
    public bool IsConnected => _hubConnection!.State == HubConnectionState.Connected;
    public void SendChat()
    {
        _hubConnection!.SendAsync("SendMessage", Chat);
        Chat.Message = null;
    }
}
