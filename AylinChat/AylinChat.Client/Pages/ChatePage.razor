@page "/Chat"
@implements IDisposable
@using AylinChat.Client.ChatServices
@using ChatModels
@inject ChatService ChatService
@using Microsoft.AspNetCore.SignalR.Client
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveWebAssembly
<PageTitle>Aylin-Chat</PageTitle>

<div class="row">
    <div class="col-lg-7">
        <div class="card">
            <div class="card-header">Aylin-Chat</div>
            <div class="card-bady">
            <ul class="list-group">
                    @foreach (var chat in ChatService.Chats)
                    {
                        <li class="list-group-item mb-2">
                            @chat.DateTime.Date.ToString("dd/MMM/yyyy")
                            <br/>
                            <span class="fw-blod">@chat.UserName:</span>
                            <br/>
                            @chat.Message
                        </li>                  
                    }
             </ul>
                <div class="mt-3">
                    <EditForm Model="Chat" OnValidSubmit="SendMessageClicked">
                    <div class="vstack gap-1">
                        <InputText @bind-Value="Chat.UserName" class="form-control w-25" placeholder="Username"/>
                            <InputTextArea @bind-Value="Chat.Message" class="form-control" placeholder="Message"/>
                    </div>
                    <button class="float-end btn btn-success mt-3" type="submit">Send Message</button>
                    </EditForm>
                </div>
            </div>
            <div class="card-footer fw-bold">
                @if (!ChatService.IsConnected)
                {
                    <div class="alert alert-danger"> 
                        Dissconected !
                    </div>
                }
                else 
                {
                    <div class="alert alert-success">
                        conected !
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    public static string? StoredUserName { get; set; }
    private Chat Chat = new();

    protected override async Task OnInitializedAsync()
    {
        ChatService.InvokeChatDisplay += StateHasChanged;
        await ChatService.StartConnectionAsync();
        ChatService.ReciveMessage();
    }

    async void SendMessageClicked() => await ChatService.SendChat(Chat);
    public void Dispose() => ChatService.InvokeChatDisplay -= StateHasChanged;
       
}
