@page "/Chat"
@using ChatModels
@using Microsoft.AspNetCore.SignalR.Client
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveWebAssembly
@inject NavigationManager NavMenager
<PageTitle>Aylin-Chat</PageTitle>

<div class="row">
    <div class="col-lg-7">
        <div class="card">
            <div class="card-header">Aylin-Chat</div>
            <div class="card-bady">
            <ul class="list-group">
                    @foreach (var chat in Chats)
                    {
                        <li class="list-group-item mb-2">
                            @chat.DateTime.Date.ToString("dd/MMM/yyyy")
                            <br/>
                            <span class="fw-blod">@chat.UserName:</span>
                            <br/>
                            @chat.Message
                        </li>                  
                    }
             </ul>
                <div class="mt-3">
                    <EditForm Model="Chat" OnValidSubmit="SendMessageClickend">
                    <div class="vstack gap-1">
                        <InputText @bind-Value="Chat.UserName" class="form-control w-25" placeholder="Username"/>
                            <InputTextArea @bind-Value="Chat.Message" class="form-control" placeholder="Message"/>
                    </div>
                    <button class="float-end btn btn-success mt-3" type="submit">Send Message</button>
                    </EditForm>
                </div>
            </div>
            <div class="card-footer fw-bold">
                @if (!IsConnected)
                {
                    <div class="alert alert-danger"> 
                        Dissconected !
                    </div>
                }
                else 
                {
                    <div class="alert alert-success">
                        conected !
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    public static string? StoredUserName { get; set; }
    private HubConnection? hubConnection;
    private List<Chat> Chats = [];
    private Chat Chat = new();

    protected async override Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(NavMenager.ToAbsoluteUri("/Hubs")).Build();

        hubConnection.On<Chat>("ReciveMessage", (Chat) =>
        {          
            Chats.Add(Chat);
            InvokeAsync(() => StateHasChanged());
        });

        await hubConnection.StartAsync();
    }
    private bool IsConnected => 
    hubConnection!.State == HubConnectionState.Connected;

    void Send()
    {
        Chat.UserName ??= StoredUserName;
        hubConnection!.SendAsync("SendMessage", Chat);
    }
    void SendMessageClickend()
    {
        Chat.DateTime = DateTime.Now;
        if (Chat.UserName != "")
            StoredUserName = Chat.UserName;

        Send();
        Chat.Message = null;

    }
}
